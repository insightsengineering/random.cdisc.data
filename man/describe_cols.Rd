% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_dim_control_and_checks.R
\name{describe_cols}
\alias{describe_cols}
\alias{is_empty_string}
\alias{check_long_strings}
\alias{check_special_chars}
\alias{detect_issues}
\title{Describe columns of a data frame}
\usage{
describe_cols(
  df,
  additional_checks = list(too_long = check_long_strings, special_chars =
    check_special_chars),
  extra_args = list(max_length = 80, special_chr = "outlier"),
  max_desc_length = 80
)

is_empty_string(column)

check_long_strings(column, max_length = 80)

check_special_chars(column, special_chr = "[\\\\n\\\\r\\\\{\\\\}\\\\[\\\\]]")

detect_issues(
  df,
  additional_checks = list(too_long = check_long_strings, special_chars =
    check_special_chars),
  extra_args = list(max_length = 80, special_chr = "outlier"),
  max_desc_length = 80
)
}
\arguments{
\item{df}{(\code{data.frame})\cr Data like \code{random.cdisc.data::cadae}.}

\item{additional_checks}{(named \code{list} of functions)\cr List of functions that take in input a column
and return a vector of logicals. List names are used as column names for the returning \code{tibble}. Needs
to have at least a \code{"column"} parameter. See \code{\link[=check_long_strings]{check_long_strings()}} for an example.}

\item{max_desc_length}{(\code{integer(1)})\cr Maximum length of the description of any column name. You can retrieve this
attribute using \code{\link[formatters:var_labels]{formatters::var_labels()}} on the data. \code{NA} is returned when absent.}

\item{column}{(\code{character})\cr Column to describe. If using a custom function, please consider how to handle
all types and missing values (\code{NA}).}

\item{max_length}{(\code{integer(1)})\cr Maximum length of a string.}

\item{special_chr}{(\code{character(1)})\cr Regular expression to detect special characters.}
}
\value{
A \code{tibble} with the following columns:
\itemize{
\item \code{col.name}: column name. We do not expect this code name to be longer than 5 - 10 characters.
\item \code{desc}: description of the column (output of \code{\link[formatters:var_labels]{formatters::var_labels()}}).
\item \code{long_desc}: \code{TRUE} if \code{desc} is longer than 80 characters. Use \code{max_desc_length} to change this variable.
\item \code{nrows}: number of elements or rows (useful when having multiple data to compare).
\item \code{type}: type of the column.
\item \code{is_numeric}: logical indicating if the column is numeric.
\item \code{n_na}: number of missing values.
\item \code{n_empty}: number of empty strings.
\item \code{n_unique}: number of unique values (everything is casted as factor).
\item \code{n_levels}: number of levels (if factor) or number of unique values (if character).
\item \code{n_empty_levels}: number of empty levels if > 0. If it is -1 the column is a factor that
contains some missing values (\code{NA}).
\item \code{additional_checks} list names: output of additional checks functions.
\item \code{mean}: mean of the column (if numeric).
\item \code{sd}: standard deviation of the column (if numeric).
\item \code{quartiles}: quartiles of the column (if numeric).
}
}
\description{
This function uses some simple descriptor to describe the columns of a data frame. It is an indicative
function and it is not intended to be used for a full description or analysis of the data.
}
\examples{
# Describe columns of a data frame
describe_cols(random.cdisc.data::cadae)

adae <- random.cdisc.data::cadae
adae$STUDYID[1] <- "missing" # We search for this string
adae$USUBJID[2] <- paste0(rep("a", 40), collapse = "_") # Too long for us!!

# Let's add one custom check function (additional_checks param)
check_spec_missing_str <- function(column, missing_str) {
  # We want characters
  column <- as.character(column)
  # We do not want NAs (already taken into account before)
  if (anyNA(column)) {
    column[is.na(column)] <- "NA"
  }
  # Checking if it is "missing"
  if (is.character(column)) {
    return(column == missing_str)
  } else {
    return(0) # not applicable (e.g. is numeric)
  }
}

# Our description function
out <- describe_cols(
  adae,
  additional_checks = list(
    "very_long" = check_long_strings,
    "n_missing" = check_spec_missing_str
  ),
  extra_args = list( # extra arguments for our additional_checks functions
    "max_length" = 70,
    "missing_str" = "missing"
  )
)
out[out$n_missing > 0, ] # STUDYID has 1 "missing" value
out[out$very_long > 0, ] # USUBJID has 1 long string

# Lets find those values that are too long

}
\seealso{
\code{\link[=reduce_num_levels_in_df]{reduce_num_levels_in_df()}} for how to reduce pivotal values when \code{n_unique} is too high.
}
